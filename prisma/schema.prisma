// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_ACCELERATE_URL") // use accelerate at build time
}

model Post {
  id              String      @id @default(cuid())
  title           String
  slug            String      @unique
  content         Json
  category        Category?   @relation(fields: [categoryId], references: [id])
  categoryId      String?
  tags            Tag[]       @relation("PostTags")
  published       Boolean     @default(false)
  publishedAt     DateTime?
  readingTime     Int?
  featuredImage   Image?      @relation("FeaturedImage", fields: [featuredImageId], references: [id])
  featuredImageId String?
  images          PostImage[]
  seoTitle        String?
  seoDescription  String?
  seoImage        Image?      @relation("SeoImage", fields: [seoImageId], references: [id])
  seoImageId      String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
   /* NEW ‚Äî back-relation for Project */
  projects    Project[]
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  posts       Post[]   @relation("PostTags")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  /* NEW ‚Äî back-relation for Project */
  projects    Project[] @relation("ProjectTags")
}


model Image {
  id         String   @id @default(cuid())
  url        String   @unique
  alt        String?
  width      Int?
  height     Int?
  mimeType   String?
  uploadedAt DateTime @default(now())

  featuredInPosts  Post[]      @relation("FeaturedImage")
  seoImageForPosts Post[]      @relation("SeoImage") // üëà added this line
  usedInPosts      PostImage[] // many-to-many join table

  // New relations for Page
  featuredInPages  Page[]      @relation("PageFeaturedImage")
  seoImageForPages Page[]      @relation("PageSeoImage")
  usedInPages      PageImage[]

  featuredInProjects  Project[]     @relation("ProjectFeaturedImage")
  seoImageForProjects Project[]     @relation("ProjectSeoImage")
  usedInProjects      ProjectImage[]

}

model PostImage {
  id       String  @id @default(cuid())
  post     Post    @relation(fields: [postId], references: [id])
  postId   String
  image    Image   @relation(fields: [imageId], references: [id])
  imageId  String
  caption  String?
  position Int? // optional: for ordering in galleries
}

model User {
  id            String   @id @default(cuid())
  firstName     String
  lastName      String
  email         String   @unique
  password      String
  emailVerified DateTime?
}


model Page {
  id              String       @id @default(cuid())
  title           String
  slug            String       @unique
  content         Json
  published       Boolean      @default(false)
  publishedAt     DateTime?
  featuredImage   Image?       @relation("PageFeaturedImage", fields: [featuredImageId], references: [id])
  featuredImageId String?
  images          PageImage[]
  seoTitle        String?
  seoDescription  String?
  seoImage        Image?       @relation("PageSeoImage", fields: [seoImageId], references: [id])
  seoImageId      String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  type            PageType @default(GENERAL)   // ‚Üê NEW
}

enum PageType {
  GENERAL
  BLOG
  CONTACT
}

model PageImage {
  id       String  @id @default(cuid())
  page     Page    @relation(fields: [pageId], references: [id])
  pageId   String
  image    Image   @relation(fields: [imageId], references: [id])
  imageId  String
  caption  String?
  position Int? // optional: useful for ordering in galleries
}

model Project {
  id              String      @id @default(cuid())
  title           String
  slug            String      @unique
  content         Json
  category        Category?   @relation(fields: [categoryId], references: [id])
  categoryId      String?
  tags            Tag[]       @relation("ProjectTags")
  published       Boolean     @default(false)
  publishedAt     DateTime?
  readingTime     Int?
  featuredImage   Image?      @relation("ProjectFeaturedImage", fields: [featuredImageId], references: [id])
  featuredImageId String?
  images          ProjectImage[]
  seoTitle        String?
  seoDescription  String?
  seoImage        Image?      @relation("ProjectSeoImage", fields: [seoImageId], references: [id])
  seoImageId      String?

  liveUrl         String?     // NEW
  repoUrl         String?     // NEW

  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}


model ProjectImage {
  id         String   @id @default(cuid())
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String
  image      Image    @relation(fields: [imageId], references: [id])
  imageId    String
  caption    String?
  position   Int?
}

